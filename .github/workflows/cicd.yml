name: monorepo-release-test
env:
  NPM_TOKEN: ${{secrets.NPM_TOKEN}}
  GH_TOKEN: ${{secrets.GH_TOKEN}}

on:
  push:
    branches: 
      - main
    #  workflow_dispatch:

jobs:
  output:
    runs-on: ubuntu-latest
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ github.event.push }}
        run: echo "$GITHUB_CONTEXT"
      - run: curl -o out.json ${{ github.event.push }}
      - name: Upload artifact
        uses: actions/upload-artifact@v1.0.0
        with:
          name: commits
          path: out.json

# jobs:
#   core:
#     runs-on: ubuntu-latest
#     env:
#       TARGET: "packages/core"
#     steps:
#       - uses: actions/checkout@v2
#       - uses: actions/setup-node@v1
#       - run: |
#           echo "Github event path:"
#           echo $GITHUB_EVENT_PATH
#           echo "jq before:"
#           jq '.before' $GITHUB_EVENT_PATH
#           echo "jq after:"
#           jq '.' $GITHUB_EVENT_PATH
#           RANGE="$(jq '.before' $GITHUB_EVENT_PATH)..$(jq '.after' $GITHUB_EVENT_PATH)"
#           COMMIT_RANGE=$(echo $RANGE | sed 's/\"//') 
#           echo $RANGE; echo $COMMIT_RANGE; pwd; ls -la
#           if .ci/build.sh $COMMIT_RANGE $TARGET; then echo "Building '$TARGET' ..." && cd $TARGET && scripts/ci.sh; else echo "No changes detected in '$TARGET'; skipping build."; fi

#   serverless:
#     runs-on: ubuntu-latest
#     env:
#       TARGET: "packages/serverless"
#     steps:
#       - uses: actions/checkout@v2
#       - uses: actions/setup-node@v1
#       - run: |
#           echo "Github event path:"
#           echo $GITHUB_EVENT_PATH
#           echo "jq before:"
#           jq '.before' $GITHUB_EVENT_PATH
#           echo "jq after:"
#           jq '.' $GITHUB_EVENT_PATH
#           RANGE="$(jq '.before' $GITHUB_EVENT_PATH)..$(jq '.after' $GITHUB_EVENT_PATH)"
#           COMMIT_RANGE=$(echo $RANGE | sed 's/\"//') 
#           echo $RANGE; echo $COMMIT_RANGE; pwd; ls -la
#           if .ci/build.sh $COMMIT_RANGE $TARGET; then echo "Building '$TARGET' ..." && cd $TARGET && scripts/ci.sh; else echo "No changes detected in '$TARGET'; skipping build."; fi
